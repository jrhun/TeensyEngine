#pragma once

#include "Pattern.h"

static const uint8_t PROGMEM world_64_32_8bit[2048] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xaa, 0xca, 0xb3, 0xaa, 0xaa, 0xbf, 0xcb, 0xcb, 0xb1, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x8f, 0x90, 0x99, 0xb4, 0xb8, 0xd3, 0xa2, 0x8c, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xb1, 0xd7, 0xcb, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x86, 0xb4, 0xbf, 0xaa, 0x7c, 0x9a, 0x91, 0xdd, 0xf6, 0xd9, 0xb8, 0xbc, 0xf2, 0xef, 0xb8, 0x00, 0x38, 0xfb, 0xff, 0xff, 0xff, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xc2, 0x91, 0x42, 0x00, 0x38, 0x80, 0xc0, 0xda, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xd7, 0xe7, 0xd1, 0xc5, 0x90, 0x86, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x38, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xfd, 0xfc, 0xfb, 0xec, 0x86, 0xcb, 0xe5, 0x4f, 0xaa, 0xff, 0xdd, 0xa2, 0x38, 0xb9, 0x7e, 0x00, 0x00, 0x00, 0xaa, 0xff, 0xec, 0xff, 0xe9, 0xeb, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0xe8, 0xf6, 0xdd, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x4f, 0x38, 0xe2, 0xa6, 0x68, 0x00, 0x7a, 0xc9, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xbf, 0xf1, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf1, 0xc0, 0xec, 0xb8, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x70, 0x7f, 0x22, 0x00, 0x00, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd1, 0x62, 0xbf, 0xff, 0xff, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0x7c, 0x6a, 0xd1, 0x8f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x00, 0x00, 0x7c, 0xec, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2e, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0xff, 0xff, 0xff, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xbd, 0xd4, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xa7, 0x00, 0xa4, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x38, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe5, 0xe9, 0xff, 0xff, 0xec, 0x4d, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xe3, 0xff, 0xbf, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xcb, 0xf6, 0xb6, 0xde, 0xc5, 0xff, 0xd8, 0x89, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0x7c, 0xc5, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0xff, 0xa7, 0x2e, 0x84, 0xa6, 0xd2, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xc4, 0xcb, 0x00, 0x9e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xda, 0xf6, 0xff, 0xb6, 0x00, 0x45, 0x0d, 0x82, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0x89, 0x96, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x9a, 0xec, 0xff, 0xff, 0xf2, 0xdf, 0xd1, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf6, 0xe2, 0xe2, 0xff, 0xff, 0xf6, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0xd1, 0xff, 0xfb, 0x38, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xd7, 0xff, 0xff, 0xb2, 0xd7, 0xe7, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xf6, 0xe7, 0x00, 0x90, 0x70, 0xa0, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0xfb, 0xff, 0xff, 0xfb, 0x38, 0x38, 0xdd, 0xff, 0xff, 0xec, 0xd1, 0xff, 0xff, 0xf1, 0xcb, 0x77, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0xf1, 0xdf, 0xcb, 0x38, 0x00, 0x86, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xb1, 0xff, 0xfb, 0xa2, 0x00, 0x00, 0x62, 0xff, 0xf1, 0x5c, 0x00, 0xea, 0xff, 0xe2, 0x6e, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xde, 0xa2, 0x00, 0x68, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xbf, 0x85, 0x00, 0x00, 0x00, 0x00, 0xdb, 0xaf, 0x00, 0x00, 0x00, 0xd6, 0xff, 0x9a, 0x00, 0x86, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xa0, 0xbe, 0xfb, 0xfb, 0xec, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xba, 0x00, 0x00, 0x00, 0x00, 0x85, 0xaa, 0x00, 0x00, 0x00, 0x90, 0x9a, 0x38, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xff, 0xff, 0xff, 0xf6, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xb7, 0xaf, 0x86, 0xbf, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x6e, 0xce, 0x7f, 0x00, 0xc2, 0x90, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xff, 0xff, 0xff, 0xf1, 0xfb, 0xf9, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xaa, 0xbf, 0xff, 0xb2, 0x89, 0x5a, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0xd1, 0x70, 0xb0, 0xb5, 0x71, 0x60, 0xbb, 0xf4, 0xbf, 0x5f, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xa2, 0x85, 0x7a, 0x6e, 0x00, 0x38, 0xb1, 0xcd, 0xb6, 0x38, 0x4f, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x38, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x90, 0xc5, 0x62, 0x77, 0x38, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x7c, 0xdd, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xed, 0xff, 0xf2, 0xd1, 0xcb, 0x00, 0x00, 0x00, 0x4d, 0x3d, 0x4f, 0x53,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xfb, 0xff, 0xff, 0xff, 0x95, 0x4f, 0xf6, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xbc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x42, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xf6, 0x65, 0x4f, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0xff, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xff, 0xff, 0xec, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xd2, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xd1, 0xa2, 0x4f, 0xca, 0xff, 0xff, 0xcb, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xff, 0xf9, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xc4, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x38, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x7c, 0xab, 0x62, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xb8, 0x0d, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//mario files
static const uint16_t PROGMEM mario1_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000,
	0xfeef, 0xfeef, 0xfeef, 0x0000, 0xce03, 0xce03, 0xf923, 0xfeef, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xfeef, 0xfeef, 0x0000,
	0xfeef, 0xfeef, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario2_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xf923, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xce03, 0xce03, 0x4e03, 0x7eef, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x7eef, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xfeef, 0xf923, 0xf923, 0xfeef, 0x4e03, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf923, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xce03, 0xfeef, 0xfeef, 0xf923, 0xf923, 0xf923, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0x4e03, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xce03, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0x4e03, 0x4e03, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario3_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0x7923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0x7eef, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x7eef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0x4e03, 0xfeef, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x7eef, 0x4e03, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x0000, 0xfeef, 0xfeef, 0xf923, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7923, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0x7923, 0xf923, 0xf923, 0xf923, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0xce03, 0x4e03, 0x0000, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario_jump_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0x7923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7923, 0x7923, 0xfeef, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x0000, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x4e03, 0x7eef, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x7eef, 0xce03, 0xce03, 0xce03,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7eef, 0x7eef, 0xce03,
	0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x0000, 0xce03,
	0xfeef, 0xfeef, 0xfeef, 0x4e03, 0xf923, 0xf923, 0xce03, 0xf923, 0xf923, 0xfeef, 0xf923, 0xf923, 0xfeef, 0xf923, 0xce03, 0xce03,
	0x0000, 0xfeef, 0x7923, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03,
	0x0000, 0x4e03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03,
	0x0000, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0xce03, 0x4e03, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario_ground_8_8_16bit[64] = {
	//A1R5G5B5
	0xe121, 0xe121, 0xfef5, 0xfef5, 0xfef5, 0xfef5, 0xfef5, 0xfef5,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xe121, 0x8000,
	0x8000, 0x8000, 0x8000, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xfef5, 0x8000, 0x8000, 0xfef5, 0xe121, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xfef5, 0x8000, 0xfef5, 0xe121, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121, 0xe121
};

static const uint16_t PROGMEM mario_bush_27_10_16bit[270] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x0000, 0x8000, 0xdbe2, 0x9ee1, 0x9ee1, 0xdbe2, 0xdbe2, 0x9ee1, 0x9ee1, 0xdbe2, 0xdbe2, 0x8000, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0x8000, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0x8000, 0xdbe2, 0x8000, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0x8000, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000,
	0x8000, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000,
	0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000,
	0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000
};

static const uint16_t PROGMEM mario_cloud_13_9_16bit[117] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0xffff, 0x9eff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9eff, 0xffff, 0xffff, 0x8000, 0x0000,
	0x8000, 0xffff, 0xffff, 0xffff, 0x9eff, 0x9eff, 0x9eff, 0x9eff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000,
	0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000,
	0x0000, 0x0000, 0x8000, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0xffff, 0x8000, 0xffff, 0x8000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x8000, 0x0000, 0x8000, 0x0000, 0x0000
};




#if !defined(pgm_read_byte)
#define pgm_read_byte(addr) (*(const unsigned char *)(addr))
#endif
#if !defined(pgm_read_word)
#define pgm_read_word(addr) (*(const unsigned short *)(addr))
#endif

#if !defined(pgm_read_qword)
#define pgm_read_qword(addr) (*(const unsigned long *)(addr))
#endif



// grayscale 8 bit image
void drawGrayscaleBitmap(int16_t x, int16_t y,
	const uint8_t bitmap[], int16_t w, int16_t h, CRGB fg, CRGB bg) {
	uint16_t buffidx = 0;
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			//          CRGB colour = blend(fg, bg, (uint8_t)pgm_read_byte(&bitmap[j * w + i]));
			CRGB colour = blend(bg, fg, pgm_read_byte(bitmap + buffidx));
			buffidx++;
			gfx.putPixel((x + i + SCREEN_WIDTH) % SCREEN_WIDTH, j + y, colour);
		}
	}
}

void drawGrayscaleBitmapColour(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint8_t hue) {
	//colourise greyscale bitmap 0
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint8_t color = pgm_read_byte(&bitmap[j * w + i]);
			if (color != 0x00) { //treat black as alpha 
				// if closer to white then turn down saturation 
				// clamp val at 128 minimum to keep from getting too dark 
				// 0 - 127
				uint8_t sat = 0; 
				uint8_t val = 0; 
				//if (color > 127) {
				//	// 128 - 255, val = 255, sat from 255 to 127
				//	val = 255; 
				//	sat = myMap(color, 128, 255, 255, 127);
				//}
				//else {
				//	sat = 255;
				//	val = color + 127;
				//}
				CRGB c= CHSV(hue, 255, color);
				gfx.putPixel((i + x) % SCREEN_WIDTH, j + y, c);
			}
		}
	}
}

// 16bit 565 encoded image
void drawRGBBitmap(int16_t x, int16_t y,
	const uint16_t bitmap[], int16_t w, int16_t h, float hueShift = 0.0) {
	if (hueShift != 0) {
		gfx.rotateCalculate(hueShift);
	}
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint16_t color = pgm_read_word(&bitmap[j * w + i]);
			if (color != 0x0000) {
				//treat black as alpha
				if (hueShift == 0) {
					gfx.putPixel(x + i, j + y, CRGB(pgm_read_byte(&gamma5[color >> 11]),
						pgm_read_byte(&gamma6[(color >> 5) & 0x3F]),
						pgm_read_byte(&gamma5[color & 0x1F])));
				}
				else {
					CRGB c = CRGB(pgm_read_byte(&gamma5[color >> 11]),
						pgm_read_byte(&gamma6[(color >> 5) & 0x3F]),
						pgm_read_byte(&gamma5[color & 0x1F]));
					gfx.putPixel(x + i, j + y, gfx.rotate(c));
				}
			}
		}
	}
}

//16bit a555 encoded image
void drawARGBBitmap(int16_t x, int16_t y,
	const uint16_t bitmap[], int16_t w, int16_t h, bool flip = false) {

	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint16_t color = pgm_read_word(&bitmap[j * w + i]);
			if (((color >> 15) & 0x01) == 1) { //if alpha 
				uint8_t r = pgm_read_byte(&gamma5[(color >> 10) & 0x1F]);
				uint8_t g = pgm_read_byte(&gamma5[(color >>  5) & 0x1F]);
				uint8_t b = pgm_read_byte(&gamma5[(color >>  0) & 0x1F]);
				uint16_t xPos = (flip) ? SCREEN_WIDTH - i - 1 : i;
				gfx.putPixel((xPos + x) % SCREEN_WIDTH, j + y, CRGB(r,g,b));
			}
		}
	}
}



//24bit R8G8B8 encoded image
void drawRGBBitmap24bit(int16_t x, int16_t y,
	const uint8_t buf_u8[], int16_t w, int16_t h, float hueShift = 0.0) {
	uint8_t px_size = 3;
	if (hueShift != 0) {
		gfx.rotateCalculate(hueShift);
	}
	CRGB color; 
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint32_t px = w * j * px_size + i * px_size;
			color.r = buf_u8[px];
			color.g = buf_u8[px + 1];
			color.b = buf_u8[px + 2];
			if (hueShift != 0) {
				color = gfx.rotate(color);
			}
			gfx.putPixel((i + x) % SCREEN_WIDTH, j + y, color);
		}
	}
	

}

class PatternWorld: public _Pattern {
public: 
	PatternWorld() : _Pattern("World") {}

	

	uint8_t drawFrame() {

		CRGB bg = CHSV(157, 255, 255);
		CRGB fg = CHSV(93, 255, 255);
		static uint16_t offset = SCREEN_WIDTH;
		static uint8_t offsetDelay = 0;
//#if defined(ARDUINO)
//		ledControl.drawGrayscaleBitmap(offset / 8, 0, world_64_32_8bit, 64, 32, fg, bg);
//#else 
//		
		uint16_t buffidx = 0;
		for (int16_t j = 0; j < SCREEN_HEIGHT; j++) {
			for (int16_t i = 0; i < SCREEN_WIDTH; i++) {
				CRGB colour = blend(bg, fg, (world_64_32_8bit[buffidx]));
				buffidx++;
				gfx.putPixel(((offset) + i + SCREEN_WIDTH) % SCREEN_WIDTH, j + 0, colour);
			}
		}
//#endif
		offsetDelay = (offsetDelay + 1) % 6;
		if (offsetDelay == 0)
			offset--;
		if (offset < 0)
			offset = SCREEN_WIDTH;
		return returnVal;
	}


};

class PatternWorld2 : public _Pattern {
public:
	PatternWorld2() : _Pattern("World (no water)") {}



	uint8_t drawFrame() {

		CRGB bg = CHSV(0, 0, 0);
		CRGB fg = gfx.getColour();// CHSV(93, 255, 255);
		static uint16_t offset = SCREEN_WIDTH;
		static uint8_t offsetDelay = 0;
		//#if defined(ARDUINO)
		//		ledControl.drawGrayscaleBitmap(offset / 8, 0, world_64_32_8bit, 64, 32, fg, bg);
		//#else 
		//		
		uint16_t buffidx = 0;
		for (int16_t j = 0; j < SCREEN_HEIGHT; j++) {
			for (int16_t i = 0; i < SCREEN_WIDTH; i++) {
				fg = gfx.getColour(-i - j/2);
				CRGB colour = blend(bg, fg, (world_64_32_8bit[buffidx]));
				buffidx++;
				gfx.putPixel(((offset) + i ) % SCREEN_WIDTH, j + 0, colour);
			}
		}
		//#endif
		offsetDelay = (offsetDelay + 1) % 6;
		if (offsetDelay == 0)
			offset--;
		if (offset < 0)
			offset = SCREEN_WIDTH;

		return returnVal;
	}


};

class PatternMario : public _Pattern {
public:
	PatternMario() : _Pattern("Mario") {}

	uint8_t drawFrame() {
		_Pattern::drawFrame();

		frameCounter = (frameCounter + 1) % 12;
		if (frameCounter == 0) {
			marioPosX = (marioPosX + 1) % SCREEN_WIDTH;
		}
		//draw from back to front
		gfx.clear();
		gfx.fill(CRGB(90, 142, 245)); //mario background colour
		//ground
		for (uint8_t i = 0; i < 8; i++) {
			drawARGBBitmap(SCREEN_WIDTH + i*8 - staticPos, groundPosY, mario_ground_8_8_16bit, 8, 8);
		}
		//bush
		drawARGBBitmap(SCREEN_WIDTH + 7 - staticPos, 14, mario_bush_27_10_16bit, 27, 10);

		//cloud
		drawARGBBitmap(cloudPosX, (frame < 2) ? 2 : 3, mario_cloud_13_9_16bit, 13, 9);



		//mario
		if (lastFrameUpdate + ((unsigned long)(frameUpdateDelay)) < GET_MILLIS()) {
			frame = (frame + 1) % 6; // 0 - 2
			lastFrameUpdate = GET_MILLIS();
			//if (frame % 3 == 0) {
			//marioPosX = (marioPosX + 1) % SCREEN_WIDTH;
			//}
			cloudPosX = (SCREEN_WIDTH + cloudPosX - 1) % SCREEN_WIDTH;
			if (frame % 2 == 0)
				staticPos = (staticPos + 1) % SCREEN_WIDTH;
		}
		if (jump) {
			jump--;
			// jump counts down from 128
			float v = 1.0 - float(jump) / float(jumpTime); // convert from 0 - 1
			float yPos = 0;
			
			if (v < 0.4) {
				yPos = myMap(v, 0.0, 0.4, 0, jumpHeight);
			}
			else if (v < 0.6) {
				yPos = jumpHeight;
			}
			else {
				yPos = myMap(v, 0.6, 1.0, jumpHeight, 0);
			}
			drawARGBBitmap(marioPosX, marioPosY - yPos, mario_jump_16_16_16bit, 16, 16);
		}
		else {
			if ((frame % 3) == 0) {
				drawARGBBitmap(marioPosX, marioPosY, mario1_16_16_16bit, 16, 16);
			}
			else if ((frame % 3) == 1) {
				drawARGBBitmap(marioPosX, marioPosY, mario2_16_16_16bit, 16, 16);
			}
			else if ((frame % 3) == 2) {
				drawARGBBitmap(marioPosX, marioPosY, mario3_16_16_16bit, 16, 16);

			}
		}

		return returnVal;
	}

	void trigger() {
		jump = jumpTime;
	}

	uint8_t frame = 0;
	uint8_t frameUpdateDelay = 100; //msec, 66msec = 15FPS
	uint8_t frameCounter = 0;
	uint8_t jump = 0;
	uint8_t jumpTime = 100;
	const uint8_t jumpHeight = 7;
	unsigned long lastFrameUpdate = 0;
	uint8_t marioPosX = 33; //positions are from the top down 
	uint8_t marioPosY = 9; 
	uint8_t cloudPosX = 42;
	const uint8_t groundPosY = 24;
	uint8_t staticPos = 0;

	
};


static const uint16_t PROGMEM eye_bg_12_9_16bit[108] = {
	//A1R8G8B8
	//these are right eyes (on a person, looking at them as an image should be on the left)
	0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6,
	0x7fff, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5ca6, 0x5ca6, 0x5ca6,
	0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5ca6, 0x5ca6,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
	0x5ca6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5ca6,
	0x5ca6, 0x5ca6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5ca6, 0x5ca6,
	0x5ca6, 0x5ca6, 0x5ca6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5ca6, 0x5ca6, 0x5ca6,
	0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6, 0x5ca6
};
static const uint16_t PROGMEM eye_bg_blink1_12_9_16bit[108] = {
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0xffff, 0xffff, 0xffff, 0xffff, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000,
	0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2db1, 0x2db1,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x633b,
	0x0000, 0x633b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x633b, 0x0000,
	0x0000, 0x0000, 0x633b, 0x633b, 0xffff, 0xffff, 0xffff, 0xffff, 0x633b, 0x633b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0x633b, 0x633b, 0x633b, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM eye_fg_12_9_16bit[108]{
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0xc279, 0xc279, 0xc279, 0xc279, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0xc279, 0xc279, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xc279, 0x0000, 0x0000,
	0x2db1, 0xe33b, 0x7fff, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x633b, 0xe33b, 0x2db1,
	0xe33b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0xe33b,
	0xe33b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe33b,
	0xe33b, 0x633b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0xe33b,
	0x0000, 0xe33b, 0x633b, 0x633b, 0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0x633b, 0xe33b, 0x0000,
	0x0000, 0x0000, 0xe33b, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0xe33b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xe33b, 0xe33b, 0xe33b, 0xe33b, 0xe33b, 0xe33b, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM eye_fg_blink1_12_9_16bit[108]{
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0xc279, 0xc279, 0xc279, 0xc279, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000,
	0x2db1, 0xc279, 0xc279, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xc279, 0x2db1, 0x2db1,
	0xe33b, 0xe33b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe33b, 0xc279, 0xc279,
	0xe33b, 0xe33b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe33b, 0xe33b,
	0x0000, 0x633b, 0xe33b, 0xe33b, 0x0000, 0x0000, 0x0000, 0x0000, 0xe33b, 0xe33b, 0x633b, 0x0000,
	0x0000, 0x0000, 0x633b, 0x633b, 0xe33b, 0xe33b, 0xe33b, 0xe33b, 0x633b, 0x633b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0x633b, 0x633b, 0x633b, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM eye_fg_blink2_12_9_16bit[108]{
	//A1R8G8B8 - eye closed
	0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0xc279, 0xc279, 0xc279, 0xc279, 0x10a8, 0x10a8, 0x2db1, 0x2db1, 0x2db1,
	0x2db1, 0xc279, 0xc279, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xc279, 0xc279, 0xc279,
	0xe33b, 0xe33b, 0xe33b, 0xe33b, 0xb1d6, 0xb1d6, 0xb1d6, 0xb1d6, 0xe33b, 0xe33b, 0xe33b, 0x633b,
	0x0000, 0x633b, 0x633b, 0x633b, 0xe33b, 0xe33b, 0xe33b, 0xe33b, 0x633b, 0x633b, 0x633b, 0x0000,
	0x0000, 0x0000, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0x633b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x633b, 0x633b, 0x633b, 0x633b, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM eye_iris_6_6_16bit[36]{
	//A1R8G8B8
	0x0000, 0x0000, 0x8930, 0x8930, 0x0000, 0x0000,
	0x0000, 0x8930, 0x827b, 0x827b, 0x8930, 0x0000,
	0x8930, 0x827b, 0x94a8, 0xffff, 0x827b, 0x8930,
	0x8930, 0x827b, 0x94a8, 0x94a8, 0x827b, 0x8930,
	0x0000, 0x8930, 0x9b9e, 0x9b9e, 0x8930, 0x0000,
	0x0000, 0x0000, 0x8930, 0x8930, 0x0000, 0x0000
};

static const uint16_t PROGMEM eyebrow_12_3_16bit[36]{
	//A1R8G8B8
	/*0x0000, 0x0000, 0x0000, 0x0000, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x10a8, 0x90a8, 0x90a8, 0x90a8, 0x10a8, 0x10a8, 0x10a8, 0x10a8, 0x90a8, 0x90a8, 0x90a8, 0x0000, 0x0000, 0x0000,
	0x0000, 0x10a8, 0x5f3b, 0x10a8, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x10a8, 0x90a8, 0x90a8, 0x10a8,
	0x0000, 0x5f3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5f3b, 0x10a8, 0x90a8*/
	//trying lighter colour
	0x0000, 0x0000, 0x0000, 0xc656, 0xc656, 0xc656, 0xc656, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0xc656, 0xc656, 0xc656, 0x0000, 0x0000, 0x0000, 0x0000, 0xc656, 0xc656, 0xc656, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xc656, 0xc656
};

static const uint16_t PROGMEM mouth_neutral_19_8_16bit[152]{
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7
};

//static const uint16_t PROGMEM mouth_neutral_19_8_16bit[152]{
//
//};


class PatternEyes : public _Pattern {
public:
	PatternEyes() : _Pattern("Eyes") {}

	uint8_t drawFrame() {
		_Pattern::drawFrame();
		//draw background, iris (taking into account movement), then outline (overwrite iris)
		// if part of iris is outside of outline need to delete it (...)
		gfx.clear();
		//gfx.fill(CRGB::White);

		if ((random8() == 0) and (random8(4) == 0) and blinkCounter == 0 and winkCounter == 0) {
			blinkCounter = blinkCounterMax;
		}
		if ((random8() == 0) and (random8(10) == 0) and blinkCounter == 0 and winkCounter == 0) {
			winkCounter = winkCounterMax;
		}

		uint8_t x = random8(); 
		x = ease8InOutCubic(x);
		x = lerp8by8(x, myMap(irisPosX, -3, 3, 0, 255), 128);
		x = myMap(x, 0, 255, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		if (random8(64) == 0) 
			irisPosX = x;
		
		//irisPosX = myMap(GuiVars1, 0, 2, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		//irisPosY = myMap(GuiVars2, 0, 2, -irisVerticalMovementMax, irisVerticalMovementMax);
		if (beat.getType() != beat.OFF) {
			irisPosX = myMap(*beat, 0, 255, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		}
		//eyebrowsOffestLeft = myMap(GuiVars3, 0, 2, 0, -3);
		EyeState esLeft = EyeState::NORMAL; 
		EyeState esRight = EyeState::NORMAL;

		if (blinkCounter) {
			blinkCounter--; 
			float p = myMap(blinkCounter, 0, blinkCounterMax, 0, 1);
			if (p > 0.90) {
				esLeft = esRight = EyeState::NORMAL;
			}
			else if (p > 0.80) {
				esLeft = EyeState::BLINK1;
			}
			else if (p > 0.6) {
				esLeft = esRight = EyeState::BLINK1;
			}
			else if (p > 0.40) {
				esLeft = EyeState::BLINK2;
				esRight = EyeState::BLINK1;
			}
			else {
				esLeft = esRight = EyeState::BLINK2;
				eyebrowsOffestLeft++;
				eyebrowsOffestRight++;
			}
		}
		if (winkCounter) {
			winkCounter--;
			float p = myMap(winkCounter, 0, winkCounterMax, 0, 1);
			if (p > 0.80) {
				esRight = EyeState::NORMAL;
			}
			else if (p > 0.50) {
				esRight = EyeState::BLINK1;
			}
			else {
				esRight = EyeState::BLINK2;
				eyebrowsOffestRight++;
			}
		}



		MouthState ms = mouthBaseState;

		if (raiseEyebrowsCounter) {
			raiseEyebrowsCounter--;
			float p = myMap(raiseEyebrowsCounter, 0, raiseEyebrowsCounterMax, 0, 1);
			if (p > 0.85) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -1;
				ms = MouthState::NEUTRAL; 
			}
			else if (p > 0.70) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -2;
				ms = MouthState::SURPRISE1;
			}
			else if (p > 0.30) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -3;
				ms = MouthState::SURPRISE2;
			}
			else if (p > 0.15) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -2;
				ms = MouthState::SURPRISE1;
			}
			else {
				eyebrowsOffestLeft = eyebrowsOffestRight = -1;
				ms = MouthState::NEUTRAL;
			}
			
		}



		//uint8_t ms = myMap(GuiVars1, 0, 2, 0, MouthState::SMILE4 + 1);
		
		if ((random8() == 0) and  (random8(2) == 0) and mouthCounter == 0 and raiseEyebrowsCounter == 0) {
			//change to new mouth position 
			mouthTargetState = (MouthState)myMap(random8(), 0, 255, 0, MouthState::SMILE4);
			mouthCounter = mouthCounterMax;
		}
		if (mouthCounter) {
			mouthCounter--;
			float i = myMap(mouthCounter, 0, mouthCounterMax, 0, 1);
			if (i > 0.7) {
				//go to targetState
				ms = (MouthState)interpolate((uint8_t)mouthBaseState, (uint8_t)mouthTargetState, myMap(i, 1, 0.7, 0, 1));
			}
			else if (i > 0.3) {
				//hold
				ms = mouthTargetState; 
			}
			else {
				//go to baseState
				ms = (MouthState)interpolate((uint8_t)mouthTargetState, (uint8_t)mouthBaseState, myMap(i, 0.3, 0, 0, 1));
			}
		}

		if ((random8() == 0) and (random8(4) == 0) and (mouthCounter == 0) and (raiseEyebrowsCounter == 0)) {
			if (mouthBaseState == MouthState::NEUTRAL) {
				mouthBaseState = MouthState::SMILE4;
			}
			else {
				mouthBaseState = MouthState::NEUTRAL;
			}
		}

		drawEyes(irisPosX, irisPosY, esLeft, esRight, eyebrowsOffestLeft, eyebrowsOffestRight);
		drawMouth((MouthState)ms);
		uint8_t leftHolder = leftEyeX;
		uint8_t rightHolder = rightEyeX;
		leftEyeX += SCREEN_WIDTH / 2;
		rightEyeX += SCREEN_WIDTH / 2;
		//draw second set of eyes so we have 1 set on front, 1 set on back
		drawEyes(irisPosX, irisPosY, esLeft, esRight, eyebrowsOffestLeft, eyebrowsOffestRight);
		drawMouth((MouthState)ms);
		leftEyeX = leftHolder;
		rightEyeX = rightHolder;

		eyebrowsOffestLeft = 0;
		eyebrowsOffestRight = 0;
		
		

		return returnVal;

	}

	void trigger() {
		raiseEyebrowsCounter = raiseEyebrowsCounterMax;
	}

	uint8_t leftEyeX = 2; 
	uint8_t rightEyeX = 15;
	uint8_t eyeY = 9; 
	uint8_t eyeIrisOffestLeftX = 3;
	uint8_t eyeIrisOffestRightX = 5;
	uint8_t eyeIrisOffestY = 1;

	uint8_t eyebrowOffsetX = 0;
	int8_t eyebrowOffsetY = -3;

	uint8_t mouthOffsetX = 4;
	uint8_t mouthOffsetY = 11; 

	int8_t irisPosX = 0;
	uint8_t irisHorizontalMovementMax = 3; 
	int8_t irisPosY = 0; 
	uint8_t irisVerticalMovementMax = 1;
	int8_t eyebrowsOffestLeft = 0;
	int8_t eyebrowsOffestRight = 0;

	uint8_t blinkCounter = 0;
	uint8_t blinkCounterMax = 30;
	uint8_t winkCounter = 0;
	uint8_t winkCounterMax = 50;
	uint8_t raiseEyebrowsCounter = 0;
	uint8_t raiseEyebrowsCounterMax = 120;
	uint16_t mouthCounter = 0; 
	uint16_t mouthCounterMax = 260;

	enum MouthState {
		TONGUE3, TONGUE2, TONGUE1,
		NEUTRAL,
		SMILE1, SMILE2, SMILE3, SMILE4,
		SURPRISE1, SURPRISE2
	};
	MouthState mouthBaseState = MouthState::NEUTRAL;
	MouthState mouthTargetState = MouthState::NEUTRAL;

	const uint16_t* eyes[3] = {
	eye_fg_12_9_16bit,
	eye_fg_blink1_12_9_16bit,
	eye_fg_blink2_12_9_16bit
	};

	enum EyeState {
		NORMAL,
		BLINK1,
		BLINK2,
	};




	//blink 
	// set timer for blink time (not needed just run frames
	// set frame to 1, then 2, then 0 and exit blink routine 

	void drawEyes(int8_t dirX, int8_t dirY, EyeState left, EyeState right, int8_t leftEyebrows = 0, int8_t rightEyebrow = 0) {
		//left eye
		if (left == EyeState::NORMAL) {
			drawARGBBitmap(leftEyeX, eyeY, eye_bg_12_9_16bit, 12, 9, false); //left eye
			drawARGBBitmap(leftEyeX + eyeIrisOffestLeftX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_12_9_16bit, 12, 9, false); //left eye
		}
		else if (left == EyeState::BLINK1) {
			drawARGBBitmap(leftEyeX, eyeY, eye_bg_blink1_12_9_16bit, 12, 9, false); //left eye
			dirX = CLAMP(dirX, -2, 2);
			drawARGBBitmap(leftEyeX + eyeIrisOffestLeftX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_blink1_12_9_16bit, 12, 9, false); //left eye
		}
		else if (left == EyeState::BLINK2) {
			//dont need bg or eyes as eye closed
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_blink2_12_9_16bit, 12, 9, false); //left eye
		}

		//right eye
		if (right == EyeState::NORMAL) {
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_bg_12_9_16bit, 12, 9, true); //flip horizontal
			drawARGBBitmap(rightEyeX + eyeIrisOffestRightX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_12_9_16bit, 12, 9, true);
		}
		else if (right == EyeState::BLINK1) {
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_bg_blink1_12_9_16bit, 12, 9, true); //flip horizontal
			dirX = CLAMP(dirX, -2, 2);
			drawARGBBitmap(rightEyeX + eyeIrisOffestRightX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_blink1_12_9_16bit, 12, 9, true);
		}
		else if (right == EyeState::BLINK2) {
			//dont need bg or eyes as eye closed
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_blink2_12_9_16bit, 12, 9, true);
		}

		//eyebrows
		drawARGBBitmap(leftEyeX + eyebrowOffsetX, eyeY + eyebrowOffsetY + leftEyebrows, eyebrow_12_3_16bit, 12, 3, false);
		drawARGBBitmap(rightEyeX + 14 + eyebrowOffsetX, eyeY + eyebrowOffsetY + rightEyebrow, eyebrow_12_3_16bit, 12, 3, true);
	}



	void drawMouth(MouthState m) {
		//colour 192, 204, 222, tongue (210, 84, 96), tongue inner (230, 130, 140)
		CRGB mouthColour = CRGB(192, 204, 222);//CRGB(192, 204, 222);
		CRGB mouthInnerColour = CRGB(230, 230, 230);
		CRGB tongueColour = CRGB(210, 84, 96); 
		CRGB tongueColourInner = CRGB(230, 130, 140);

		uint8_t posX = mouthOffsetX + leftEyeX;
		uint8_t posY = mouthOffsetY + eyeY;


		if (m == MouthState::NEUTRAL) {
			gfx.drawLine(posX + 6, posY + 2, posX + 6, posY + 2, mouthColour); 
			gfx.drawLine(posX + 7, posY + 3, posX + 11, posY + 3, mouthColour);
			gfx.drawLine(posX + 12, posY + 2, posX + 12, posY + 2, mouthColour);
		}
		else if (m == MouthState::SMILE1) {
			gfx.drawLine(posX + 5, posY + 2, posX + 6, posY + 2, mouthColour);
			gfx.drawLine(posX + 7, posY + 3, posX + 11, posY + 3, mouthColour);
			gfx.drawLine(posX + 12, posY + 2, posX + 13, posY + 2, mouthColour);
			gfx.putPixel(posX + 14, posY + 1, mouthColour);
		}
		else if (m == MouthState::SMILE2) {
			gfx.drawLine(posX + 4, posY + 1, posX + 4, posY + 1, mouthColour);
			gfx.drawLine(posX + 5, posY + 2, posX + 13, posY + 2, mouthColour);
			gfx.drawLine(posX + 7, posY + 3, posX + 11, posY + 3, mouthColour);
			gfx.drawLine(posX + 14, posY + 1, posX + 14, posY + 1, mouthColour);
		}
		else if (m == MouthState::SMILE3) {
			gfx.drawLine(posX + 3, posY + 1, posX + 3, posY + 1, mouthColour);
			gfx.drawLine(posX + 15, posY + 1, posX + 15, posY + 1, mouthColour);
			gfx.drawLine(posX + 4, posY + 2, posX + 14, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 7, posY + 3, posX + 11, posY + 3, mouthInnerColour);
			gfx.drawLine(posX + 7, posY + 4, posX + 11, posY + 4, mouthColour);
			
		}
		
		else if (m == MouthState::SMILE4) {
			//make more narrow
			gfx.putPixel(posX+2, posY, mouthColour);
			gfx.putPixel(posX + 16, posY, mouthColour);
			gfx.drawLine(posX + 3, posY + 1, posX + 15, posY + 1, mouthColour);

			gfx.drawLine(posX + 5, posY + 2, posX + 13, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 2, posX + 12, posY + 2, mouthInnerColour);

			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 7, posY + 3, posX + 11, posY + 3, mouthInnerColour);

			gfx.drawLine(posX + 7, posY + 4, posX + 11, posY + 4, mouthColour);
			//gfx.putPixel(posX, posY, mouthColour); 
			//gfx.putPixel(posX + 18, posY, mouthColour); 
			//gfx.drawLine(posX + 1, posY + 1, posX + 17, posY + 1, mouthColour);

			//gfx.drawLine(posX + 3, posY + 2, posX + 15, posY + 2, mouthColour);
			//gfx.drawLine(posX + 4, posY + 2, posX + 14, posY + 2, mouthInnerColour);

			//gfx.drawLine(posX + 4, posY + 3, posX + 14, posY + 3, mouthColour);
			//gfx.drawLine(posX + 5, posY + 3, posX + 13, posY + 3, mouthInnerColour);

			//gfx.drawLine(posX + 5, posY + 4, posX + 13, posY + 4, mouthColour);
		}
		else if (m == MouthState::TONGUE1) {
			gfx.drawLine(posX + 5, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 13, posY + 2, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour); 
			gfx.drawLine(posX + 9, posY + 5, posX + 11, posY + 5, tongueColour);
			gfx.putPixel(posX + 10, posY + 4, tongueColourInner); 

		}
		else if (m == MouthState::TONGUE2) {
			gfx.drawLine(posX + 4, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 14, posY + 2, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour);
			gfx.drawLine(posX + 8, posY + 5, posX + 12, posY + 5, tongueColour);
			gfx.drawLine(posX + 9, posY + 6, posX + 11, posY + 6, tongueColour);
			gfx.drawLine(posX + 10, posY + 4, posX + 10, posY + 5, tongueColourInner);
		}
		else if (m == MouthState::TONGUE3) {
			gfx.drawLine(posX + 3, posY + 1, posX + 3, posY + 1, mouthColour);
			gfx.drawLine(posX + 4, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 14, posY + 2, mouthColour);
			gfx.drawLine(posX + 15, posY + 1, posX + 15, posY + 1, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour);
			gfx.drawLine(posX + 8, posY + 5, posX + 12, posY + 5, tongueColour);
			gfx.drawLine(posX + 8, posY + 6, posX + 12, posY + 6, tongueColour);
			gfx.drawLine(posX + 9, posY + 7, posX + 11, posY + 7, tongueColour);
			gfx.drawLine(posX + 10, posY + 4, posX + 10, posY + 6, tongueColourInner);
		}
		else if (m == MouthState::SURPRISE1) {
			gfx.drawLine(posX + 5, posY + 2, posX + 6, posY + 2, mouthColour);
			gfx.drawLine(posX + 7, posY + 3, posX + 10, posY + 3, mouthColour);
			gfx.drawLine(posX + 11, posY + 2, posX + 12, posY + 2, mouthColour);
		}
		else if (m == MouthState::SURPRISE2) {
			gfx.drawLine(posX + 8, posY + 0, posX + 9, posY + 0, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 9, posY + 4, mouthColour);
			gfx.putPixel(posX + 7, posY + 1, mouthColour);
			gfx.putPixel(posX + 6, posY + 2, mouthColour);
			gfx.putPixel(posX + 7, posY + 3, mouthColour);
			gfx.putPixel(posX + 10, posY + 1, mouthColour);
			gfx.putPixel(posX + 11, posY + 2, mouthColour);
			gfx.putPixel(posX + 10, posY + 3, mouthColour);
		}
	}

	//animations for eyes
	//blink, wink, raise 1 eyebrow, raise both eyebrows
	
	//animations for mouth 
	// resting, tongue out, smile 

	//animation - define an animation state and how long to hold each one for 
};

static const uint16_t PROGMEM flower_base1_10_10_16bit[100]{
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM flower_base2_10_10_16bit[100]{
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x4b83, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x3ac3, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4b83, 0x3ac3, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM flower_base3_10_10_16bit[100]{
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x5c24, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x4b82, 0x4b82, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x2a02, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x5c24, 0x4b82, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x3ac3, 0x4b82, 0x3ac3, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM flower_base4_10_10_16bit[100]{
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6d41, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x3ac3, 0x5c24, 0x5c24, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x4b82, 0x4b82, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x2a02, 0x0000, 0x0000,
	0x0000, 0x6d41, 0x5c44, 0x3ac3, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x5c44, 0x4b82, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x3ac3, 0x4b82, 0x3ac3, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM flower_base5_10_10_16bit[100]{
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4b82, 0x6d41, 0x6d41,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x3ac3, 0x5c24, 0x5c24, 0x4b82,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x4b82, 0x4b82, 0x3ac3, 0x0000,
	0x6d41, 0x6d41, 0x4ba2, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x2a02, 0x0000, 0x0000,
	0x5c24, 0x6d41, 0x5c44, 0x3ac3, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x4b83, 0x5c44, 0x4b82, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x3ac3, 0x4b82, 0x3ac3, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x2a02, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x2a02, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

//preference drawing top directly to have more control over colour
//static const uint8_t PROGMEM flower_top1_8_11_8bit[88] = {
//	//greyscale8
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00
//};
//static const uint8_t PROGMEM flower_top2_8_11_8bit[88] = {
//	//greyscale8
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x5e, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x42, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//static const uint8_t PROGMEM flower_top3_8_11_8bit[88] = {
//	//greyscale8
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0xa7, 0x6d, 0x6d, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x6d, 0xa6, 0x5d, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x5d, 0x5d, 0x42, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//static const uint8_t PROGMEM flower_top4_8_11_8bit[88] = {
//	//greyscale8
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0xa4, 0xa4, 0xa4, 0x00, 0x00,
//	0x00, 0x00, 0xa4, 0x6e, 0x6e, 0x6e, 0x6e, 0x00,
//	0x00, 0x00, 0xa4, 0x6e, 0xc4, 0x5d, 0x42, 0x00,
//	0x00, 0xa4, 0x6e, 0xc4, 0xa6, 0x5d, 0x42, 0x00,
//	0x00, 0x6e, 0x5d, 0x5d, 0x5d, 0x42, 0x00, 0x00,
//	0x00, 0x00, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//static const uint8_t PROGMEM flower_top5_8_11_8bit[88] = {
//	//greyscale8
//	0x00, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0xa4, 0xa4, 0x6e, 0x6e, 0x00, 0x00,
//	0x00, 0xa4, 0x6e, 0x6e, 0x6e, 0x5d, 0x5d, 0x00,
//	0xa4, 0x6e, 0x6e, 0xbc, 0xc4, 0x5d, 0x42, 0x42,
//	0x00, 0x6e, 0x5d, 0xc4, 0xa6, 0x5d, 0x42, 0x00,
//	0x6e, 0x5d, 0x5d, 0x5d, 0x5d, 0x42, 0x00, 0x00,
//	0x00, 0x00, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
static const uint16_t PROGMEM flower_top4_8_7_8bit[56] = {
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xfbf0, 0xfbf0, 0xfbf0, 0x0000, 0x0000,
	0x0000, 0x0000, 0xfbf0, 0xf146, 0xf146, 0xf146, 0xf146, 0x0000,
	0x0000, 0x0000, 0xfbf0, 0xf146, 0xf62d, 0xc905, 0x98c4, 0x0000,
	0x0000, 0xfbf0, 0xf146, 0xf62d, 0xf505, 0xc905, 0x98c4, 0x0000,
	0x0000, 0xf146, 0xc905, 0xc905, 0xc905, 0x98c4, 0x0000, 0x0000,
	0x0000, 0x0000, 0x98c4, 0x98c4, 0x98c4, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM flower_top5_8_7_8bit[56] = {
	//R5G6B5
	0x0000, 0x0000, 0x0000, 0x0000, 0xfbf0, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xfbf0, 0xfbf0, 0xf146, 0xf146, 0x0000, 0x0000,
	0x0000, 0xfbf0, 0xf146, 0xf146, 0xf146, 0xc905, 0xc905, 0x0000,
	0xfbf0, 0xf146, 0xf146, 0xf714, 0xf62d, 0xc905, 0x98c4, 0x98c4,
	0x0000, 0xf146, 0xc905, 0xf62d, 0xf505, 0xc905, 0x98c4, 0x0000,
	0xf146, 0xc905, 0xc905, 0xc905, 0xc905, 0x98c4, 0x0000, 0x0000,
	0x0000, 0x0000, 0x98c4, 0x98c4, 0x98c4, 0x0000, 0x0000, 0x0000
};
static const uint8_t PROGMEM flower_top4_8_7_24bit[168] = {
	//R8G8B8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xfa, 0x7d, 0x85, 0xfa, 0x7d, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf5, 0xc6, 0x6b, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf5, 0xc6, 0x6b, 0xf0, 0xa1, 0x29, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf6, 0x2a, 0x35, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x19, 0x24, 0x98, 0x19, 0x24, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM flower_top5_8_7_24bit[168] = {
	//R8G8B8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0x00, 0x00, 0x00,
	0xfa, 0x7d, 0x85, 0xf6, 0x2a, 0x35, 0xf6, 0x2a, 0x35, 0xf4, 0xe1, 0xa2, 0xf5, 0xc6, 0x6b, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x98, 0x19, 0x24,
	0x00, 0x00, 0x00, 0xf6, 0x2a, 0x35, 0xcf, 0x23, 0x2d, 0xf5, 0xc6, 0x6b, 0xf0, 0xa1, 0x29, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00,
	0xf6, 0x2a, 0x35, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0xcf, 0x23, 0x2d, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x19, 0x24, 0x98, 0x19, 0x24, 0x98, 0x19, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t PROGMEM tulip_base2_8_5_24bit[120] = {
	//RGB888
	0x00, 0x00, 0x00, 0x53, 0xe1, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x58, 0xdf, 0x38, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x21, 0xb0, 0x06, 0x55, 0xe4, 0x3a, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x68, 0xda, 0x4f, 0x24, 0xb5, 0x0b, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x1e, 0x9f, 0x05, 0x1c, 0x7a, 0x08, 0x24, 0xb3, 0x09, 0x1e, 0x9f, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x1c, 0x7a, 0x08, 0x1e, 0x9f, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_base3_8_10_24bit[240] = {
	//RGB888
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x5c, 0xe0, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0xd8, 0x36,
	0x00, 0x00, 0x00, 0x1d, 0x9e, 0x05, 0x5c, 0xe0, 0x46, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x54, 0xe2, 0x38, 0x54, 0xe2, 0x38, 0x25, 0xb4, 0x0a,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x24, 0xb3, 0x09, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x68, 0xda, 0x4f, 0x1e, 0xa1, 0x06, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x1d, 0x9e, 0x04, 0x1c, 0x7a, 0x08, 0x24, 0xb3, 0x09, 0x1e, 0x9f, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x1c, 0x7a, 0x08, 0x1e, 0x9f, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_base4_8_10_24bit[240] = {
	//RGB888
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xe2, 0x3b,
	0x00, 0x00, 0x00, 0x55, 0xe2, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x55, 0xe2, 0x3b, 0x23, 0xb2, 0x08,
	0x00, 0x00, 0x00, 0x25, 0xb4, 0x0a, 0x55, 0xe2, 0x3b, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x55, 0xe2, 0x3b, 0x23, 0xb2, 0x08, 0x19, 0x7c, 0x05,
	0x00, 0x00, 0x00, 0x1e, 0x9f, 0x05, 0x55, 0xe2, 0x3b, 0x24, 0xb3, 0x09, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x24, 0xb3, 0x09, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x22, 0xb1, 0x06, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x1d, 0x9e, 0x04, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x1c, 0x7a, 0x08, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_base5_8_10_24bit[240] = {
	//RGB888
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xb2, 0x08, 0x00, 0x00, 0x00,
	0x55, 0xe2, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xe2, 0x3b, 0x00, 0x00, 0x00,
	0x25, 0xb4, 0x0a, 0x54, 0xe1, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x23, 0xb2, 0x08, 0x55, 0xe2, 0x3b, 0x19, 0x7c, 0x05,
	0x1f, 0xa0, 0x07, 0x54, 0xe1, 0x38, 0x21, 0xb5, 0x09, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x55, 0xe2, 0x3b, 0x55, 0xe2, 0x3b, 0x19, 0x7c, 0x05,
	0x19, 0x7e, 0x06, 0x25, 0xb4, 0x0a, 0x55, 0xe2, 0x3b, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x55, 0xe2, 0x3b, 0x23, 0xb2, 0x08, 0x19, 0x7c, 0x05,
	0x00, 0x00, 0x00, 0x1e, 0x9f, 0x05, 0x55, 0xe2, 0x3b, 0x24, 0xb3, 0x09, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x24, 0xb3, 0x09, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x22, 0xb1, 0x06, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x1d, 0x9e, 0x04, 0x1c, 0x7a, 0x08, 0x22, 0xb1, 0x06, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7a, 0x08, 0x1c, 0x7a, 0x08, 0x20, 0x9d, 0x09, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x7c, 0x05, 0x19, 0x7c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_top3_4_4_24bit[] = {
	//RGB888 + 5 offset
	0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0xdd, 0x36, 0xf7, 0x00, 0x00, 0x00,
	0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed,
	0xdd, 0x36, 0xf7, 0xea, 0x5f, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed,
	0x00, 0x00, 0x00, 0xd8, 0x38, 0xed, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_top4_6_6_24bit[] = {
	//RGB888
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xea, 0x5f, 0xff, 0xea, 0x5f, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xed, 0x75, 0xff, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xdd, 0x36, 0xf7, 0xea, 0x5f, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x38, 0xed, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t PROGMEM tulip_top5_6_6_24bit[] = {
	//RGB888
	0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0x00, 0x00, 0x00,
	0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed,
	0x00, 0x00, 0x00, 0xed, 0x75, 0xff, 0xed, 0x75, 0xff, 0xd8, 0x38, 0xed, 0xea, 0x5f, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xea, 0x5f, 0xff, 0xed, 0x75, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xdd, 0x36, 0xf7, 0xea, 0x5f, 0xff, 0xea, 0x5f, 0xff, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x38, 0xed, 0xd8, 0x38, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


class PatternFlowers : public _Pattern {
public:
	PatternFlowers() : _Pattern("Flowers"), currentFlowerType(FlowerType::ROSES), targetFlowerType(FlowerType::ROSES){}

	uint8_t drawFrame() {
		_Pattern::drawFrame();
		gfx.clear();

		float i = myMap(frameCounter, 0, frameCounterMax, 0, 2);
		//count up from 0 to 2
		if (i < 1.0) {
			//0 - 1
			currentFrame = interpolate(0, (int)maxFrames, i);
		}
		else {
			//1-2
			currentFrame = interpolate((int)maxFrames, 0, i - 1);
		}
		currentFrame = CLAMP(currentFrame, 0, maxFrames - 1);

		//change to only had subset of hues, avoid green and washed out colours
		const uint8_t randomAmount = 10; 
		uint8_t hue = FxFade;
		if (currentFlowerType == FlowerType::ROSES) {
			drawFlower((0 + flowerRotatePos) % SCREEN_WIDTH,	    0, currentFrame, hues[currentHue] + random8(randomAmount));
			drawFlower((13 * 1 + flowerRotatePos) % SCREEN_WIDTH,	1, currentFrame, hues[(currentHue + 1) % maxHues] + random8(randomAmount));
			drawFlower((13 * 2 + flowerRotatePos) % SCREEN_WIDTH,  0, currentFrame, hues[(currentHue + 2) % maxHues] + random8(randomAmount));
			drawFlower((13 * 3 + flowerRotatePos) % SCREEN_WIDTH,  1, currentFrame, hues[(currentHue + 3) % maxHues] + random8(randomAmount));
			drawFlower((13 * 4 + flowerRotatePos) % SCREEN_WIDTH,  0, currentFrame, hues[(currentHue + 4) % maxHues] + random8(randomAmount));
		}
		else if (currentFlowerType == FlowerType::TULIPS) {
			drawTulip((0 + flowerRotatePos) % SCREEN_WIDTH,	  0, currentFrame, huesTulip[(currentHue + 0) % maxHues] + random8(randomAmount));
			drawTulip((13 * 1 + flowerRotatePos) % SCREEN_WIDTH, 1, currentFrame, huesTulip[(currentHue + 1) % maxHues] + random8(randomAmount));
			drawTulip((13 * 2 + flowerRotatePos) % SCREEN_WIDTH, 0, currentFrame, huesTulip[(currentHue + 2) % maxHues] + random8(randomAmount));
			drawTulip((13 * 3 + flowerRotatePos) % SCREEN_WIDTH, 1, currentFrame, huesTulip[(currentHue + 3) % maxHues] + random8(randomAmount));
			drawTulip((13 * 4 + flowerRotatePos) % SCREEN_WIDTH, 0, currentFrame, huesTulip[(currentHue + 4) % maxHues] + random8(randomAmount));
		}

		
		
		//change hue at end of frame counter
		frameCounter = (frameCounter + 1) % frameCounterMax;
		if (frameCounter == 0) {
			currentHue = (currentHue + 3) % maxHues;
			if (targetFlowerType != currentFlowerType) {
				currentFlowerType = targetFlowerType;
			}
		}
		//flowerRotateFrames++;
		if (flowerRotateFrames > 30) {
			flowerRotateFrames = 0;
			flowerRotatePos = (flowerRotatePos + 1) % SCREEN_WIDTH; 
		}

		return returnVal;
	}

	void drawFlower(uint8_t x, uint8_t y, uint8_t frame, float hue) {
		if (frame == 0) {
			gfx.drawLine(flowerBaseOffsetX + x + 4, flowerBaseOffsetY + y + 8, flowerBaseOffsetX + x + 4, flowerBaseOffsetY + y + 9, CRGB(7, 21, 2));
			gfx.putPixel(flowerBaseOffsetX + x + 4, flowerBaseOffsetY + y + 7, CRGB(11, 34, 3));
		}
		else {
			drawRGBBitmap(flowerBaseOffsetX + x, flowerBaseOffsetY + y, flowerBase[frame], 10, 10);
		}
		

		//drawGrayscaleBitmapColour(flowerTopOffsetX + x, flowerTopOffsetY + y, flowerTop[frame], 8, 11, hue);
		
		//darkest to lightest 
		CRGB flower0 = CRGB(152, 25, 36); // CHSV(hue, 213, 153); //actual 
		CRGB flower1 = CRGB(206, 36, 47);
		CRGB flower2 = CRGB(242, 43, 48);
		CRGB flower3 = CRGB(251, 125, 131);

		//flower0.rotateCalculate(120);
		//float h = myMap(GuiVars1, 0, 2, 0, 360); //22.5, 45, 180, 225, 270, 306
		gfx.rotateCalculate(hue);
		flower0 = gfx.rotate(flower0);
		flower1 = gfx.rotate(flower1);
		flower2 = gfx.rotate(flower2);
		flower3 = gfx.rotate(flower3);

		//draw centre bit of flower (240, 61, 41) always as yellow
		CRGB flowerCentre0 = CRGB(240, 161, 41);
		CRGB flowerCentre1 = CRGB(245, 198, 107);
		CRGB flowerCentre2 = CRGB(244, 224, 162);
		if (frame == 1) {
			gfx.putPixel(flowerTopOffsetX + x + 6, flowerTopOffsetY + y + 10, flower0); 
		}
		else if (frame == 2) {
			gfx.putPixel(flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 5, flower1);
			gfx.putPixel(flowerTopOffsetX + x + 6, flowerTopOffsetY + y + 5, flower1);
			gfx.putPixel(flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 6, flower1);
			gfx.putPixel(flowerTopOffsetX + x + 6, flowerTopOffsetY + y + 6, flower0);
			gfx.putPixel(flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 7, flower0);
			gfx.putPixel(flowerTopOffsetX + x + 6, flowerTopOffsetY + y + 7, flower0);
		}
		if (frame == 3) {
			gfx.putPixel(flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 5, flower0);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 6, flower0);
			gfx.drawLine(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 5, flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 5, flower1);
			gfx.putPixel(flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 4, flower1);
			gfx.drawLine(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 3, flowerTopOffsetX + x + 5, flowerTopOffsetY + y + 3, flower2);
			gfx.putPixel(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 4, flower2);
			gfx.putPixel(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 3, flower3);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 4, flowerCentre0);
		}
		else if (frame == 4) {
			//drawRGBBitmap(flowerTopOffsetX + x, flowerTopOffsetY + y, flower_top4_8_7_8bit, 8, 7, h);
			drawRGBBitmap24bit(flowerTopOffsetX + x, flowerTopOffsetY + y, flower_top4_8_7_24bit, 8, 7, hue);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 4, flowerCentre0);
			gfx.putPixel(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 4, flowerCentre1);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 3, flowerCentre1);
		}
		else if (frame == 5) {
			drawRGBBitmap24bit(flowerTopOffsetX + x, flowerTopOffsetY + y, flower_top5_8_7_24bit, 8, 7, hue);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 4, flowerCentre0);
			gfx.putPixel(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 4, flowerCentre1);
			gfx.putPixel(flowerTopOffsetX + x + 4, flowerTopOffsetY + y + 3, flowerCentre1);
			gfx.putPixel(flowerTopOffsetX + x + 3, flowerTopOffsetY + y + 3, flowerCentre2);
		}
	}

	void drawTulip(uint8_t x, uint8_t y, uint8_t frame, float hue) {
		uint8_t baseX = x + tulipBaseOffsetX;
		uint8_t baseY = y + tulipBaseOffsetY;
		uint8_t topX = x + tulipTopOffsetX;
		uint8_t topY = y + tulipTopOffsetY;
		//hue = myMap(GuiVars1, 0, 2, 0, 360);
		gfx.rotateCalculate(hue);
		if (frame == 0) {
			//base
			gfx.putPixel(baseX + 4, baseY + 7, CRGB(30, 157, 6));
			gfx.putPixel(baseX + 4, baseY + 8, CRGB(25, 124, 5));
			gfx.putPixel(baseX + 4, baseY + 9, CRGB(25, 124, 5));
		}
		else if (frame == 1) {
			//base
			gfx.putPixel(baseX + 4, baseY + 9, CRGB(25, 124, 5));
			gfx.putPixel(baseX + 4, baseY + 8, CRGB(30, 157, 6));
			gfx.putPixel(baseX + 4, baseY + 7, CRGB(36, 179, 9));
			//gfx.putPixel(baseX + 3, baseY + 7, CRGB(30, 159,5));
			gfx.putPixel(baseX + 3, baseY + 8, CRGB(25, 124, 5));
			gfx.putPixel(baseX + 5, baseY + 7, CRGB(104, 218, 79));
			//gfx.putPixel(baseX + 5, baseY + 8, CRGB(25, 124, 5));
			
			//flower
			gfx.putPixel(baseX + 4, baseY + 6, gfx.rotate(CRGB(237,117,255)));
		}
		else if (frame == 2) {
			//extra offset as saving space (cutting top part of base out)
			const uint8_t additOffsetY = 5;
			drawRGBBitmap24bit(baseX, baseY + additOffsetY, tulip_base2_8_5_24bit, 8, 5);
			gfx.putPixel(baseX + 4, baseY + 4, gfx.rotate(CRGB(216, 56, 237)));
			gfx.putPixel(baseX + 4, baseY + 3, gfx.rotate(CRGB(237, 117, 255)));
			gfx.putPixel(baseX + 3, baseY + 4, gfx.rotate(CRGB(237, 117, 255)));

		}
		else if (frame == 3) {
			const uint8_t additOffsetX = 1; 
			const uint8_t additOffsetY = 5;
			drawRGBBitmap24bit(baseX, baseY, tulip_base3_8_10_24bit, 8, 10);
			drawRGBBitmap24bit(topX + additOffsetX, topY + additOffsetY, tulip_top3_4_4_24bit, 4, 4, hue);
		}
		else if (frame == 4) {
			drawRGBBitmap24bit(baseX, baseY, tulip_base4_8_10_24bit, 8, 10);
			drawRGBBitmap24bit(topX, topY, tulip_top4_6_6_24bit, 6, 6, hue);
		}
		else if (frame == 5) {
			drawRGBBitmap24bit(baseX, baseY, tulip_base5_8_10_24bit, 8, 10);
			drawRGBBitmap24bit(topX, topY, tulip_top5_6_6_24bit, 6, 6, hue);
		}
	}

	void trigger() {
		if (currentFlowerType == FlowerType::ROSES)
			targetFlowerType = FlowerType::TULIPS;
		else
			targetFlowerType = FlowerType::ROSES;
	}

	uint8_t currentFrame = 0;
	const uint8_t maxFrames = 6;
	uint16_t frameCounter = 0;
	uint16_t frameCounterMax = 270;
	
	uint8_t flowerRotatePos = 0;
	uint8_t flowerRotateFrames = 0; 

	uint8_t flowerBaseOffsetX = 1;
	uint8_t flowerBaseOffsetY = 14;
	uint8_t flowerTopOffsetX = 0;
	uint8_t flowerTopOffsetY = 9;

	uint8_t tulipBaseOffsetX = 1;
	uint8_t tulipBaseOffsetY = 14;
	uint8_t tulipTopOffsetX = 2;
	uint8_t tulipTopOffsetY = 8;

	enum FlowerType {
		ROSES, 
		TULIPS
	} currentFlowerType, targetFlowerType;


	static const uint8_t maxHues = 7;
	const float hues[maxHues] = {
		//0, 27, 41, 138, 156, 191, 213
		0.0, 22.5, 45, 180, 225, 270, 306
	};
	const float huesTulip[maxHues] = {
		0.0, 36, 77, 118, 250, 290, 360
	};
	uint8_t currentHue = 0;


	const uint16_t* flowerBase[6] = {
		//R5G6B5
		flower_base1_10_10_16bit,
		flower_base1_10_10_16bit,
		flower_base2_10_10_16bit,
		flower_base3_10_10_16bit,
		flower_base4_10_10_16bit,
		flower_base5_10_10_16bit
	};
};
