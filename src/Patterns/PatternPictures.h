#pragma once

#include "Pattern.h"

static const uint8_t PROGMEM world_64_32_8bit[2048] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xaa, 0xca, 0xb3, 0xaa, 0xaa, 0xbf, 0xcb, 0xcb, 0xb1, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x8f, 0x90, 0x99, 0xb4, 0xb8, 0xd3, 0xa2, 0x8c, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xb1, 0xd7, 0xcb, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x86, 0xb4, 0xbf, 0xaa, 0x7c, 0x9a, 0x91, 0xdd, 0xf6, 0xd9, 0xb8, 0xbc, 0xf2, 0xef, 0xb8, 0x00, 0x38, 0xfb, 0xff, 0xff, 0xff, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xc2, 0x91, 0x42, 0x00, 0x38, 0x80, 0xc0, 0xda, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xd7, 0xe7, 0xd1, 0xc5, 0x90, 0x86, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x38, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xfd, 0xfc, 0xfb, 0xec, 0x86, 0xcb, 0xe5, 0x4f, 0xaa, 0xff, 0xdd, 0xa2, 0x38, 0xb9, 0x7e, 0x00, 0x00, 0x00, 0xaa, 0xff, 0xec, 0xff, 0xe9, 0xeb, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0xe8, 0xf6, 0xdd, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x4f, 0x38, 0xe2, 0xa6, 0x68, 0x00, 0x7a, 0xc9, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xbf, 0xf1, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf1, 0xc0, 0xec, 0xb8, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x70, 0x7f, 0x22, 0x00, 0x00, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd1, 0x62, 0xbf, 0xff, 0xff, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0x7c, 0x6a, 0xd1, 0x8f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x00, 0x00, 0x7c, 0xec, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2e, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0xff, 0xff, 0xff, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xbd, 0xd4, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xa7, 0x00, 0xa4, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x38, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe5, 0xe9, 0xff, 0xff, 0xec, 0x4d, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xe3, 0xff, 0xbf, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xcb, 0xf6, 0xb6, 0xde, 0xc5, 0xff, 0xd8, 0x89, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0x7c, 0xc5, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0xff, 0xa7, 0x2e, 0x84, 0xa6, 0xd2, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xc4, 0xcb, 0x00, 0x9e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xda, 0xf6, 0xff, 0xb6, 0x00, 0x45, 0x0d, 0x82, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0x89, 0x96, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x9a, 0xec, 0xff, 0xff, 0xf2, 0xdf, 0xd1, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf6, 0xe2, 0xe2, 0xff, 0xff, 0xf6, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0xd1, 0xff, 0xfb, 0x38, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xd7, 0xff, 0xff, 0xb2, 0xd7, 0xe7, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xf6, 0xe7, 0x00, 0x90, 0x70, 0xa0, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0xfb, 0xff, 0xff, 0xfb, 0x38, 0x38, 0xdd, 0xff, 0xff, 0xec, 0xd1, 0xff, 0xff, 0xf1, 0xcb, 0x77, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0xf1, 0xdf, 0xcb, 0x38, 0x00, 0x86, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xb1, 0xff, 0xfb, 0xa2, 0x00, 0x00, 0x62, 0xff, 0xf1, 0x5c, 0x00, 0xea, 0xff, 0xe2, 0x6e, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xde, 0xa2, 0x00, 0x68, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xbf, 0x85, 0x00, 0x00, 0x00, 0x00, 0xdb, 0xaf, 0x00, 0x00, 0x00, 0xd6, 0xff, 0x9a, 0x00, 0x86, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xa0, 0xbe, 0xfb, 0xfb, 0xec, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xba, 0x00, 0x00, 0x00, 0x00, 0x85, 0xaa, 0x00, 0x00, 0x00, 0x90, 0x9a, 0x38, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xff, 0xff, 0xff, 0xf6, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xb7, 0xaf, 0x86, 0xbf, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x6e, 0xce, 0x7f, 0x00, 0xc2, 0x90, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xff, 0xff, 0xff, 0xf1, 0xfb, 0xf9, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xaa, 0xbf, 0xff, 0xb2, 0x89, 0x5a, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0xd1, 0x70, 0xb0, 0xb5, 0x71, 0x60, 0xbb, 0xf4, 0xbf, 0x5f, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xa2, 0x85, 0x7a, 0x6e, 0x00, 0x38, 0xb1, 0xcd, 0xb6, 0x38, 0x4f, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x38, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x90, 0xc5, 0x62, 0x77, 0x38, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x7c, 0xdd, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xed, 0xff, 0xf2, 0xd1, 0xcb, 0x00, 0x00, 0x00, 0x4d, 0x3d, 0x4f, 0x53,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xfb, 0xff, 0xff, 0xff, 0x95, 0x4f, 0xf6, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xbc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x42, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xf6, 0x65, 0x4f, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0xff, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0xff, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xff, 0xff, 0xec, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xd2, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xd1, 0xa2, 0x4f, 0xca, 0xff, 0xff, 0xcb, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xff, 0xf9, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xc4, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x38, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x7c, 0xab, 0x62, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xb8, 0x0d, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//mario files
static const uint16_t PROGMEM mario1_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000,
	0xfeef, 0xfeef, 0xfeef, 0x0000, 0xce03, 0xce03, 0xf923, 0xfeef, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xfeef, 0xfeef, 0x0000,
	0xfeef, 0xfeef, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario2_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xf923, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xce03, 0xce03, 0x4e03, 0x7eef, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x7eef, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xfeef, 0xf923, 0xf923, 0xfeef, 0x4e03, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf923, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xce03, 0xfeef, 0xfeef, 0xf923, 0xf923, 0xf923, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0x4e03, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03, 0xce03, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0x4e03, 0x4e03, 0x0000, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario3_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0x7923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0x7eef, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x7eef, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0x0000, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0x4e03, 0xfeef, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x7eef, 0x4e03, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0x7eef, 0x0000,
	0x7eef, 0x7eef, 0x0000, 0xfeef, 0xfeef, 0xf923, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7923, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0x7923, 0xf923, 0xf923, 0xf923, 0x7923, 0x4e03, 0x4e03, 0x0000, 0x0000,
	0x0000, 0x4e03, 0xce03, 0x4e03, 0x0000, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0x4e03, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario_jump_16_16_16bit[256] = {
	//A1R5G5B5
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0x7923, 0x7923, 0x7923, 0x0000, 0x0000, 0x0000, 0xfeef, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x0000, 0x7923, 0x7923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7923, 0x7923, 0xfeef, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x0000, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xfeef, 0xfeef,
	0x0000, 0x0000, 0x0000, 0x4e03, 0x7eef, 0xce03, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0x7eef, 0xce03, 0xce03, 0xce03,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03,
	0x0000, 0x0000, 0x0000, 0x4e03, 0xce03, 0xfeef, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xce03,
	0x0000, 0x0000, 0x0000, 0x0000, 0xce03, 0xce03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0x0000,
	0x0000, 0x0000, 0x4e03, 0x4e03, 0x4e03, 0x4e03, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xfeef, 0xce03, 0x0000, 0x0000,
	0x7eef, 0x7eef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0xce03, 0xce03, 0xf923, 0xce03, 0x7eef, 0x7eef, 0x0000,
	0x7eef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x7eef, 0x7eef, 0xce03,
	0xfeef, 0xfeef, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x0000, 0xce03,
	0xfeef, 0xfeef, 0xfeef, 0x4e03, 0xf923, 0xf923, 0xce03, 0xf923, 0xf923, 0xfeef, 0xf923, 0xf923, 0xfeef, 0xf923, 0xce03, 0xce03,
	0x0000, 0xfeef, 0x7923, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03,
	0x0000, 0x4e03, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xce03, 0xce03,
	0x0000, 0xce03, 0xce03, 0xce03, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0xce03, 0x4e03, 0x4e03, 0xf923, 0xf923, 0xf923, 0xf923, 0x4e03, 0x4e03, 0x4e03, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM mario_ground_8_8_16bit[64] = {
	//A1R5G5B5
	0xe121, 0xe121, 0xfef5, 0xfef5, 0xfef5, 0xfef5, 0xfef5, 0xfef5,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0xe121, 0x8000, 0xe121, 0x8000,
	0x8000, 0x8000, 0x8000, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121,
	0x8000, 0xfef5, 0xfef5, 0x8000, 0x8000, 0xfef5, 0xe121, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xfef5, 0x8000, 0xfef5, 0xe121, 0xe121,
	0x8000, 0xfef5, 0xe121, 0xe121, 0x8000, 0xfef5, 0xe121, 0xe121
};

static const uint16_t PROGMEM mario_bush_27_10_16bit[270] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x0000, 0x8000, 0xdbe2, 0x9ee1, 0x9ee1, 0xdbe2, 0xdbe2, 0x9ee1, 0x9ee1, 0xdbe2, 0xdbe2, 0x8000, 0xdbe2, 0xdbe2, 0x8000, 0x0000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x8000, 0xdbe2, 0xdbe2, 0x8000, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0x8000, 0xdbe2, 0x8000, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0x8000, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000,
	0x8000, 0xdbe2, 0xdbe2, 0x9ee1, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000,
	0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000,
	0x0000, 0x8000, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0xdbe2, 0x8000, 0x0000
};

static const uint16_t PROGMEM mario_cloud_13_9_16bit[117] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x8000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000, 0x0000, 0x0000,
	0x0000, 0x8000, 0xffff, 0x9eff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9eff, 0xffff, 0xffff, 0x8000, 0x0000,
	0x8000, 0xffff, 0xffff, 0xffff, 0x9eff, 0x9eff, 0x9eff, 0x9eff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000,
	0x0000, 0x8000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8000,
	0x0000, 0x0000, 0x8000, 0xffff, 0xffff, 0x8000, 0x8000, 0x8000, 0xffff, 0x8000, 0xffff, 0x8000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x8000, 0x0000, 0x8000, 0x0000, 0x0000
};




#if !defined(pgm_read_byte)
#define pgm_read_byte(addr) (*(const unsigned char *)(addr))
#endif
#if !defined(pgm_read_word)
#define pgm_read_word(addr) (*(const unsigned short *)(addr))
#endif


// grayscale 8 bit image
void drawGrayscaleBitmap(int16_t x, int16_t y,
	const uint8_t bitmap[], int16_t w, int16_t h, CRGB fg, CRGB bg) {
	uint16_t buffidx = 0;
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			//          CRGB colour = blend(fg, bg, (uint8_t)pgm_read_byte(&bitmap[j * w + i]));
			CRGB colour = blend(bg, fg, pgm_read_byte(bitmap + buffidx));
			buffidx++;
			gfx.putPixel((x + i + SCREEN_WIDTH) % SCREEN_WIDTH, j + y, colour);
		}
	}
}

//void drawGrayscaleBitmapColour(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h) {
//	//colourise greyscale bitmap 0
//	uint8_t l = c.getLuma();
//	CRGB colour = CHSV(pattern)
//	gfx.putPixel(x + i + SCREEN_WIDTH) % SCREEN_WIDTH, j + y, gfx.hue
//}

// 16bit 565 encoded image
void drawRGBBitmap(int16_t x, int16_t y,
	const uint16_t bitmap[], int16_t w, int16_t h) {
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint16_t color = pgm_read_word(&bitmap[j * w + i]);
			gfx.putPixel(x + i, j + y, CRGB(pgm_read_byte(&gamma5[color >> 11]),
				pgm_read_byte(&gamma6[(color >> 5) & 0x3F]),
				pgm_read_byte(&gamma5[color & 0x1F])));
		}
	}
}

//16bit a555 encoded image
void drawARGBBitmap(int16_t x, int16_t y,
	const uint16_t bitmap[], int16_t w, int16_t h, bool flip = false) {
	for (int16_t j = 0; j < h; j++) {
		for (int16_t i = 0; i < w; i++) {
			uint16_t color = pgm_read_word(&bitmap[j * w + i]);
			if (((color >> 15) & 0x01) == 1) { //if alpha 
				uint8_t r = pgm_read_byte(&gamma5[(color >> 10) & 0x1F]);
				uint8_t g = pgm_read_byte(&gamma5[(color >>  5) & 0x1F]);
				uint8_t b = pgm_read_byte(&gamma5[(color >>  0) & 0x1F]);
				uint16_t xPos = (flip) ? SCREEN_WIDTH - i - 1 : i;
				gfx.putPixel((xPos + x) % SCREEN_WIDTH, j + y, CRGB(r,g,b));
			}
		}
	}
}

class PatternWorld: public _Pattern {
public: 
	PatternWorld() : _Pattern("World") {}

	

	uint8_t drawFrame() {

		CRGB bg = CHSV(157, 255, 255);
		CRGB fg = CHSV(93, 255, 255);
		static uint16_t offset = SCREEN_WIDTH;
		static uint8_t offsetDelay = 0;
//#if defined(ARDUINO)
//		ledControl.drawGrayscaleBitmap(offset / 8, 0, world_64_32_8bit, 64, 32, fg, bg);
//#else 
//		
		uint16_t buffidx = 0;
		for (int16_t j = 0; j < SCREEN_HEIGHT; j++) {
			for (int16_t i = 0; i < SCREEN_WIDTH; i++) {
				CRGB colour = blend(bg, fg, (world_64_32_8bit[buffidx]));
				buffidx++;
				gfx.putPixel(((offset) + i + SCREEN_WIDTH) % SCREEN_WIDTH, j + 0, colour);
			}
		}
//#endif
		offsetDelay = (offsetDelay + 1) % 6;
		if (offsetDelay == 0)
			offset--;
		if (offset < 0)
			offset = SCREEN_WIDTH;
		return returnVal;
	}


};

class PatternWorld2 : public _Pattern {
public:
	PatternWorld2() : _Pattern("World (no water)") {}



	uint8_t drawFrame() {

		CRGB bg = CHSV(0, 0, 0);
		CRGB fg = gfx.getColour();// CHSV(93, 255, 255);
		static uint16_t offset = SCREEN_WIDTH;
		static uint8_t offsetDelay = 0;
		//#if defined(ARDUINO)
		//		ledControl.drawGrayscaleBitmap(offset / 8, 0, world_64_32_8bit, 64, 32, fg, bg);
		//#else 
		//		
		uint16_t buffidx = 0;
		for (int16_t j = 0; j < SCREEN_HEIGHT; j++) {
			for (int16_t i = 0; i < SCREEN_WIDTH; i++) {
				fg = gfx.getColour(-i - j/2);
				CRGB colour = blend(bg, fg, (world_64_32_8bit[buffidx]));
				buffidx++;
				gfx.putPixel(((offset) + i ) % SCREEN_WIDTH, j + 0, colour);
			}
		}
		//#endif
		offsetDelay = (offsetDelay + 1) % 6;
		if (offsetDelay == 0)
			offset--;
		if (offset < 0)
			offset = SCREEN_WIDTH;

		return returnVal;
	}


};

class PatternMario : public _Pattern {
public:
	PatternMario() : _Pattern("Mario") {}

	uint8_t drawFrame() {
		_Pattern::drawFrame();

		frameCounter = (frameCounter + 1) % 12;
		if (frameCounter == 0) {
			marioPosX = (marioPosX + 1) % SCREEN_WIDTH;
		}
		//draw from back to front
		gfx.clear();
		gfx.fill(CRGB(90, 142, 245)); //mario background colour
		//ground
		for (uint8_t i = 0; i < 8; i++) {
			drawARGBBitmap(SCREEN_WIDTH + i*8 - staticPos, groundPosY, mario_ground_8_8_16bit, 8, 8);
		}
		//bush
		drawARGBBitmap(SCREEN_WIDTH + 7 - staticPos, 14, mario_bush_27_10_16bit, 27, 10);

		//cloud
		drawARGBBitmap(cloudPosX, (frame < 2) ? 2 : 3, mario_cloud_13_9_16bit, 13, 9);



		//mario
		if (lastFrameUpdate + ((unsigned long)(frameUpdateDelay)) < GET_MILLIS()) {
			frame = (frame + 1) % 6; // 0 - 2
			lastFrameUpdate = GET_MILLIS();
			//if (frame % 3 == 0) {
			//marioPosX = (marioPosX + 1) % SCREEN_WIDTH;
			//}
			cloudPosX = (SCREEN_WIDTH + cloudPosX - 1) % SCREEN_WIDTH;
			if (frame % 2 == 0)
				staticPos = (staticPos + 1) % SCREEN_WIDTH;
		}
		if (jump) {
			jump--;
			// jump counts down from 128
			float v = 1.0 - float(jump) / float(jumpTime); // convert from 0 - 1
			float yPos = 0;
			
			if (v < 0.4) {
				yPos = myMap(v, 0.0, 0.4, 0, jumpHeight);
			}
			else if (v < 0.6) {
				yPos = jumpHeight;
			}
			else {
				yPos = myMap(v, 0.6, 1.0, jumpHeight, 0);
			}
			drawARGBBitmap(marioPosX, marioPosY - yPos, mario_jump_16_16_16bit, 16, 16);
		}
		else {
			if ((frame % 3) == 0) {
				drawARGBBitmap(marioPosX, marioPosY, mario1_16_16_16bit, 16, 16);
			}
			else if ((frame % 3) == 1) {
				drawARGBBitmap(marioPosX, marioPosY, mario2_16_16_16bit, 16, 16);
			}
			else if ((frame % 3) == 2) {
				drawARGBBitmap(marioPosX, marioPosY, mario3_16_16_16bit, 16, 16);

			}
		}

		return returnVal;
	}

	void trigger() {
		jump = jumpTime;
	}

	uint8_t frame = 0;
	uint8_t frameUpdateDelay = 100; //msec, 66msec = 15FPS
	uint8_t frameCounter = 0;
	uint8_t jump = 0;
	uint8_t jumpTime = 100;
	const uint8_t jumpHeight = 7;
	unsigned long lastFrameUpdate = 0;
	uint8_t marioPosX = 33; //positions are from the top down 
	uint8_t marioPosY = 9; 
	uint8_t cloudPosX = 42;
	const uint8_t groundPosY = 24;
	uint8_t staticPos = 0;

	
};


static const uint16_t PROGMEM eye_bg_14_8_16bit[112] = {
	//A1R8G8B8
	//these are right eyes (on a person, looking at them as an image should be on the left)
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7,
	0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7,
	0x5cc7, 0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xffff, 0xffff, 0xffff, 0xffff, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7
};
static const uint16_t PROGMEM eye_bg_blink1_14_8_16bit[112] = {
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0x2db1, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000, 0x0000,
	0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x2db1, 0x2db1, 0x0000,
	0x0000, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde,
	0x0000, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x5f3b, 0x0000,
	0x0000, 0x0000, 0x5f3b, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x5f3b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM eye_fg_14_8_16bit[112]{
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x0000, 0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0xadb1, 0x0000, 0x0000, 0x0000,
	0x0000, 0xadb1, 0xdf3b, 0x7fff, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0xdf3b, 0xadb1, 0x2db1, 0x0000,
	0x0000, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0xadb1, 0xadb1,
	0x0000, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0x0000,
	0x0000, 0x0000, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xdf3b, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0xdf3b, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM eye_fg_blink1_14_8_16bit[112]{
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0x2db1, 0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000, 0x0000,
	0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0xadb1, 0x2db1, 0x2db1, 0x0000,
	0x0000, 0xadb1, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0xadb1, 0xadb1, 0xadb1,
	0x0000, 0xdf3b, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0x5f3b, 0x0000,
	0x0000, 0x0000, 0x5f3b, 0xdf3b, 0xdf3b, 0x0000, 0x0000, 0x0000, 0x0000, 0xdf3b, 0xdf3b, 0x5f3b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
static const uint16_t PROGMEM eye_fg_blink2_14_8_16bit[112]{
	//A1R8G8B8 - eye closed
	0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x2db1, 0x10a8, 0x10a8, 0x2db1, 0x0000, 0x0000, 0x0000,
	0x2db1, 0x2db1, 0x2db1, 0x2db1, 0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x10a8, 0x10a8, 0x2db1, 0x2db1, 0x2db1, 0x0000,
	0xadb1, 0xadb1, 0xadb1, 0xadb1, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0xadb1, 0xadb1, 0xadb1, 0xadb1,
	0x0000, 0xadb1, 0xdf3b, 0xdf3b, 0xdf3b, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0xdf3b, 0xdf3b, 0xdf3b, 0x5f3b, 0x0000,
	0x0000, 0x0000, 0x5f3b, 0x5f3b, 0x5f3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5f3b, 0x5f3b, 0x5f3b, 0x5f3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

static const uint16_t PROGMEM eye_iris_6_6_16bit[36]{
	//A1R8G8B8
	0x0000, 0x0000, 0x8930, 0x8930, 0x0000, 0x0000,
	0x0000, 0x8930, 0x827b, 0x827b, 0x8930, 0x0000,
	0x8930, 0x827b, 0x94a8, 0xffff, 0x827b, 0x8930,
	0x8930, 0x827b, 0x94a8, 0x94a8, 0x827b, 0x8930,
	0x0000, 0x8930, 0x9b9e, 0x9b9e, 0x8930, 0x0000,
	0x0000, 0x0000, 0x8930, 0x8930, 0x0000, 0x0000
};

static const uint16_t PROGMEM eyebrow_14_4_16bit[56]{
	//A1R8G8B8
	0x0000, 0x0000, 0x0000, 0x0000, 0x90a8, 0x90a8, 0x90a8, 0x90a8, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x10a8, 0x90a8, 0x90a8, 0x90a8, 0x10a8, 0x10a8, 0x10a8, 0x10a8, 0x90a8, 0x90a8, 0x90a8, 0x0000, 0x0000, 0x0000,
	0x0000, 0x10a8, 0x5f3b, 0x10a8, 0x2db1, 0x0000, 0x0000, 0x0000, 0x0000, 0x2db1, 0x10a8, 0x90a8, 0x90a8, 0x10a8,
	0x0000, 0x5f3b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5f3b, 0x10a8, 0x90a8
};

static const uint16_t PROGMEM mouth_neutral_19_8_16bit[152]{
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0xdf3b, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7,
	0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7, 0x5cc7
};

//static const uint16_t PROGMEM mouth_neutral_19_8_16bit[152]{
//
//};


class PatternEyes : public _Pattern {
public:
	PatternEyes() : _Pattern("Eyes") {}

	uint8_t drawFrame() {
		_Pattern::drawFrame();
		//draw background, iris (taking into account movement), then outline (overwrite iris)
		// if part of iris is outside of outline need to delete it (...)
		gfx.clear();

		if ((random8() == 0) and (random8(4) == 0) and blinkCounter == 0 and winkCounter == 0) {
			blinkCounter = blinkCounterMax;
		}
		if ((random8() == 0) and (random8(10) == 0) and blinkCounter == 0 and winkCounter == 0) {
			winkCounter = winkCounterMax;
		}

		uint8_t x = random8(); 
		x = ease8InOutCubic(x);
		x = lerp8by8(x, myMap(irisPosX, -3, 3, 0, 255), 128);
		x = myMap(x, 0, 255, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		if (random8(64) == 0) 
			irisPosX = x;
		
		//irisPosX = myMap(GuiVars1, 0, 2, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		//irisPosY = myMap(GuiVars2, 0, 2, -irisVerticalMovementMax, irisVerticalMovementMax);
		if (beat.getType() != beat.OFF) {
			irisPosX = myMap(*beat, 0, 255, -irisHorizontalMovementMax, irisHorizontalMovementMax);
		}
		//eyebrowsOffestLeft = myMap(GuiVars3, 0, 2, 0, -3);
		EyeState esLeft = EyeState::NORMAL; 
		EyeState esRight = EyeState::NORMAL;

		if (blinkCounter) {
			blinkCounter--; 
			float p = myMap(blinkCounter, 0, blinkCounterMax, 0, 1);
			if (p > 0.90) {
				esLeft = esRight = EyeState::NORMAL;
			}
			else if (p > 0.80) {
				esLeft = EyeState::BLINK1;
			}
			else if (p > 0.6) {
				esLeft = esRight = EyeState::BLINK1;
			}
			else if (p > 0.40) {
				esLeft = EyeState::BLINK2;
				esRight = EyeState::BLINK1;
			}
			else {
				esLeft = esRight = EyeState::BLINK2;
				eyebrowsOffestLeft++;
				eyebrowsOffestRight++;
			}
		}
		if (winkCounter) {
			winkCounter--;
			float p = myMap(winkCounter, 0, winkCounterMax, 0, 1);
			if (p > 0.80) {
				esRight = EyeState::NORMAL;
			}
			else if (p > 0.50) {
				esRight = EyeState::BLINK1;
			}
			else {
				esRight = EyeState::BLINK2;
				eyebrowsOffestRight++;
			}
		}

		if (raiseEyebrowsCounter) {
			raiseEyebrowsCounter--;
			float p = myMap(raiseEyebrowsCounter, 0, raiseEyebrowsCounterMax, 0, 1);
			if (p > 0.85) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -1;
			}
			else if (p > 0.70) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -2;
			}
			else if (p > 0.30) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -3;
			}
			else if (p > 0.15) {
				eyebrowsOffestLeft = eyebrowsOffestRight = -2;
			}
			else {
				eyebrowsOffestLeft = eyebrowsOffestRight = -1;
			}
			
		}

		drawEyes(irisPosX, irisPosY, esLeft, esRight, eyebrowsOffestLeft, eyebrowsOffestRight);
		uint8_t leftHolder = leftEyeX; 
		uint8_t rightHolder = rightEyeX; 
		leftEyeX += SCREEN_WIDTH / 2;
		rightEyeX += SCREEN_WIDTH / 2;
		drawEyes(irisPosX, irisPosY, esLeft, esRight, eyebrowsOffestLeft, eyebrowsOffestRight);
		leftEyeX = leftHolder; 
		rightEyeX = rightHolder;

		eyebrowsOffestLeft = 0;
		eyebrowsOffestRight = 0;

		//uint8_t ms = myMap(GuiVars1, 0, 2, 0, MouthState::SMILE4 + 1);
		MouthState ms = mouthBaseState;
		if (random8() == 0 and mouthCounter == 0) {
			//change to new mouth position 
			mouthTargetState = (MouthState)myMap(random8(), 0, 255, 0, MouthState::SMILE4);
			mouthCounter = mouthCounterMax;
		}
		if (mouthCounter) {
			mouthCounter--;
			float i = myMap(mouthCounter, 0, mouthCounterMax, 0, 1);
			if (i > 0.7) {
				//go to targetState
				ms = (MouthState)interpolate((uint8_t)mouthBaseState, (uint8_t)mouthTargetState, myMap(i, 1, 0.7, 0, 1));
			}
			else if (i > 0.3) {
				//hold
				ms = mouthTargetState; 
			}
			else {
				//go to baseState
				ms = (MouthState)interpolate((uint8_t)mouthTargetState, (uint8_t)mouthBaseState, myMap(i, 0.3, 0, 0, 1));
			}
		}

		if ((random8() == 0) and (random8(4) == 0)) {
			if (mouthBaseState == MouthState::NEUTRAL) {
				mouthBaseState = MouthState::SMILE4;
			}
			else {
				mouthBaseState = MouthState::NEUTRAL;
			}
		}
		
		drawMouth( (MouthState)ms ); 

		return returnVal;

	}

	void trigger() {
		raiseEyebrowsCounter = raiseEyebrowsCounterMax;
	}

	uint8_t leftEyeX = 1; 
	uint8_t rightEyeX = 17;
	uint8_t eyeY = 9; 
	uint8_t eyeIrisOffestX = 4;
	uint8_t eyeIrisOffestY = 1;
	uint8_t eyebrowOffsetX = 0;
	int8_t eyebrowOffsetY = -2;

	uint8_t mouthOffsetX = 6;
	uint8_t mouthOffsetY = 10; 

	int8_t irisPosX = 0;
	uint8_t irisHorizontalMovementMax = 3; 
	int8_t irisPosY = 0; 
	uint8_t irisVerticalMovementMax = 1;
	int8_t eyebrowsOffestLeft = 0;
	int8_t eyebrowsOffestRight = 0;

	uint8_t blinkCounter = 0;
	uint8_t blinkCounterMax = 30;
	uint8_t winkCounter = 0;
	uint8_t winkCounterMax = 50;
	uint8_t raiseEyebrowsCounter = 0;
	uint8_t raiseEyebrowsCounterMax = 60;
	uint8_t mouthCounter = 0; 
	uint8_t mouthCounterMax = 200;

	enum MouthState {
		TONGUE3, TONGUE2, TONGUE1,
		NEUTRAL,
		SMILE1, SMILE2, SMILE3, SMILE4,
	};
	MouthState mouthBaseState = MouthState::NEUTRAL;
	MouthState mouthTargetState = MouthState::NEUTRAL;

	const uint16_t* eyes[3] = {
	eye_fg_14_8_16bit,
	eye_fg_blink1_14_8_16bit,
	eye_fg_blink2_14_8_16bit
	};

	enum EyeState {
		NORMAL,
		BLINK1,
		BLINK2,
	};




	//blink 
	// set timer for blink time (not needed just run frames
	// set frame to 1, then 2, then 0 and exit blink routine 

	void drawEyes(int8_t dirX, int8_t dirY, EyeState left, EyeState right, int8_t leftEyebrows = 0, int8_t rightEyebrow = 0) {
		//left eye
		if (left == EyeState::NORMAL) {
			drawARGBBitmap(leftEyeX, eyeY, eye_bg_14_8_16bit, 14, 8, false); //left eye
			drawARGBBitmap(leftEyeX + eyeIrisOffestX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_14_8_16bit, 14, 8, false); //left eye
		}
		else if (left == EyeState::BLINK1) {
			drawARGBBitmap(leftEyeX, eyeY, eye_bg_blink1_14_8_16bit, 14, 8, false); //left eye
			dirX = CLAMP(dirX, -2, 2);
			drawARGBBitmap(leftEyeX + eyeIrisOffestX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_blink1_14_8_16bit, 14, 8, false); //left eye
		}
		else if (left == EyeState::BLINK2) {
			//dont need bg or eyes as eye closed
			drawARGBBitmap(leftEyeX, eyeY, eye_fg_blink2_14_8_16bit, 14, 8, false); //left eye
		}

		//right eye
		if (right == EyeState::NORMAL) {
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_bg_14_8_16bit, 14, 8, true); //flip horizontal
			drawARGBBitmap(rightEyeX + eyeIrisOffestX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_14_8_16bit, 14, 8, true);
		}
		else if (right == EyeState::BLINK1) {
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_bg_blink1_14_8_16bit, 14, 8, true); //flip horizontal
			dirX = CLAMP(dirX, -2, 2);
			drawARGBBitmap(rightEyeX + eyeIrisOffestX + dirX, eyeY + eyeIrisOffestY + dirY, eye_iris_6_6_16bit, 6, 6);
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_blink1_14_8_16bit, 14, 8, true);
		}
		else if (right == EyeState::BLINK2) {
			//dont need bg or eyes as eye closed
			drawARGBBitmap(rightEyeX + 14, eyeY, eye_fg_blink2_14_8_16bit, 14, 8, true);
		}

		//eyebrows
		drawARGBBitmap(leftEyeX + eyebrowOffsetX, eyeY + eyebrowOffsetY + leftEyebrows, eyebrow_14_4_16bit, 14, 4, false);
		drawARGBBitmap(rightEyeX + 14 + eyebrowOffsetX, eyeY + eyebrowOffsetY + rightEyebrow, eyebrow_14_4_16bit, 14, 4, true);
	}



	void drawMouth(MouthState m) {
		//colour 192, 204, 222, tongue (210, 84, 96), tongue inner (230, 130, 140)
		CRGB mouthColour = CRGB(192, 204, 222);
		CRGB tongueColour = CRGB(210, 84, 96); 
		CRGB tongueColourInner = CRGB(230, 130, 140);

		uint8_t posX = leftEyeX + mouthOffsetX;
		uint8_t posY = eyeY + mouthOffsetY;

		if (m == MouthState::NEUTRAL) {
			gfx.drawLine(posX + 4, posY + 2, posX + 5, posY + 2, mouthColour); 
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 14, posY + 2, mouthColour);
		}
		else if (m == MouthState::SMILE1) {
			gfx.drawLine(posX + 3, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 15, posY + 2, mouthColour);
			gfx.putPixel(posX + 16, posY + 1, mouthColour);
		}
		else if (m == MouthState::SMILE2) {
			gfx.drawLine(posX + 1, posY + 1, posX + 2, posY + 1, mouthColour);
			gfx.drawLine(posX + 3, posY + 2, posX + 15, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 16, posY + 1, posX + 17, posY + 1, mouthColour);
		}
		else if (m == MouthState::SMILE3) {
			gfx.drawLine(posX + 1, posY + 1, posX + 2, posY + 1, mouthColour);
			gfx.drawLine(posX + 16, posY + 1, posX + 17, posY + 1, mouthColour);
			gfx.drawLine(posX + 3, posY + 2, posX + 15, posY + 2, mouthColour);
			gfx.drawLine(posX + 5, posY + 3, posX + 13, posY + 3, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, CRGB::White);
			gfx.drawLine(posX + 6, posY + 4, posX + 12, posY + 4, mouthColour);
			
		}
		else if (m == MouthState::SMILE4) {
			gfx.putPixel(posX, posY, mouthColour); 
			gfx.putPixel(posX + 18, posY, mouthColour); 
			gfx.drawLine(posX + 1, posY + 1, posX + 17, posY + 1, mouthColour);

			gfx.drawLine(posX + 3, posY + 2, posX + 15, posY + 2, mouthColour);
			gfx.drawLine(posX + 4, posY + 2, posX + 14, posY + 2, CRGB::White);

			gfx.drawLine(posX + 4, posY + 3, posX + 14, posY + 3, mouthColour);
			gfx.drawLine(posX + 5, posY + 3, posX + 13, posY + 3, CRGB::White);

			gfx.drawLine(posX + 5, posY + 4, posX + 13, posY + 4, mouthColour);
		}
		else if (m == MouthState::TONGUE1) {
			gfx.drawLine(posX + 5, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 13, posY + 2, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour); 
			gfx.drawLine(posX + 9, posY + 5, posX + 11, posY + 5, tongueColour);
			gfx.putPixel(posX + 10, posY + 4, tongueColourInner); 

		}
		else if (m == MouthState::TONGUE2) {
			gfx.drawLine(posX + 4, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 14, posY + 2, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour);
			gfx.drawLine(posX + 8, posY + 5, posX + 12, posY + 5, tongueColour);
			gfx.drawLine(posX + 9, posY + 6, posX + 11, posY + 6, tongueColour);
			gfx.drawLine(posX + 10, posY + 4, posX + 10, posY + 5, tongueColourInner);
		}
		else if (m == MouthState::TONGUE3) {
			gfx.drawLine(posX + 1, posY + 1, posX + 2, posY + 1, mouthColour);
			gfx.drawLine(posX + 3, posY + 2, posX + 5, posY + 2, mouthColour);
			gfx.drawLine(posX + 6, posY + 3, posX + 12, posY + 3, mouthColour);
			gfx.drawLine(posX + 13, posY + 2, posX + 15, posY + 2, mouthColour);
			gfx.drawLine(posX + 16, posY + 1, posX + 17, posY + 1, mouthColour);
			gfx.drawLine(posX + 8, posY + 4, posX + 12, posY + 4, tongueColour);
			gfx.drawLine(posX + 8, posY + 5, posX + 12, posY + 5, tongueColour);
			gfx.drawLine(posX + 8, posY + 6, posX + 12, posY + 6, tongueColour);
			gfx.drawLine(posX + 9, posY + 7, posX + 11, posY + 7, tongueColour);
			gfx.drawLine(posX + 10, posY + 4, posX + 10, posY + 6, tongueColourInner);
		}
	}

	//animations for eyes
	//blink, wink, raise 1 eyebrow, raise both eyebrows
	
	//animations for mouth 
	// resting, tongue out, smile 

	//animation - define an animation state and how long to hold each one for 




};